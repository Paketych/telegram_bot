import telebot
from telebot import types
import random
import requests
import json
from currency_converter import CurrencyConverter


bot = telebot.TeleBot("6883554728:AAEBP5V4iVYdEcHPu2kVqb61YVR_9A0FNXI")

amount = 0

currency = CurrencyConverter()

API = "e209c06ccf735053ecaa9dffc589a172"

poem = ("–û—á–µ–Ω—å –ª—é–±—è—Ç –æ–±–µ–∑—å—è–Ω—ã \n"
     "–ö—É—à–∞—Ç—å —Å–ª–∞–¥–∫–∏–µ –±–∞–Ω–∞–Ω—ã. \n"
     "–ú—ã –Ω–∞ –æ–±–µ–∑—å—è–Ω –ø–æ—Ö–æ–∂–∏, \n"
     "–ò –±–∞–Ω–∞–Ω—ã –ª—é–±–∏–º —Ç–æ–∂–µ.")

@bot.message_handler(commands=["start"])
def start(message):
    photo = open("./hello.jpg", "rb")
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ', callback_data='stih')
    btn2 = types.InlineKeyboardButton('—Ñ–æ—Ç–æ –∫–∞–ø–∏–±–∞—Ä—ã', callback_data='kap')
    btn3 = types.InlineKeyboardButton('–ö—Ä—É—Ç–∞—è –º—É–∑—ã–∫–∞', callback_data='url')
    markup.row(btn1, btn2)
    markup.row(btn3)
    bot.send_photo(message.chat.id, photo, caption= f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>üòé \n'
                                      f'üîπ–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –í–∏–∫—Ç–æ—Ä –ö–∞–ª–æ–µ–¥–æ–≤ü•∏ \n'
                                      f'üîπ–Ø –ø–æ–∫–∞ –º–∞–ª–æ —á—Ç–æ —É–º–µ—é, –Ω–∞–ø—Ä–∏–º–µ—Ä,  —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—å id, –µ—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ /idüî¢ \n'
                                      f'üîπ–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Çü§ñ \n'
                                      f'üîπ–ï—â–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /prediction –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ–≥–¥–∞ —è —Å–¥–µ–ª–∞—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µüîÆ \n'
                                      f'üîπ–£ –º–µ–Ω—è –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /weather‚òÄÔ∏è \n'
                                      f'üîπ–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã, –∫–æ–º–∞–Ω–¥–∞ /convertation \n'
                                      f'üîπ–í –æ–±—â–µ–º —ç—Ç–æ—Ç –±–æ—Ç –µ—â–µ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∏–ª–∏ –∂–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—ÇüòÄ',reply_markup=markup, parse_mode='HTML' )

@bot.message_handler(commands=['pupsik'])
def pupsik(message):
    pupsik = open("./pupsik.mp3", "rb")
    bot.send_audio(message.chat.id, pupsik)

@bot.message_handler(commands=["prediction"])
def prediction(message):
    msg = bot.send_message(message.chat.id, "<b>–ó–∞–¥–∞–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç')</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, question)
def question(message):
    listp = ["–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π", '–î–∞', '–ù–µ—Ç', '–°–∫–æ—Ä–µ–µ –¥–∞', '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç', '–ï—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è', "–¢–æ—á–Ω–æ –¥–∞", "–¢–æ—á–Ω–æ –Ω–µ—Ç", '–î—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç –¥–∞', "–î—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç", '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ']
    prediction = random.choice(listp)
    prove = message.text.lower().find("?")
    if prove != -1:
        bot.send_message(message.chat.id, prediction)
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, question)

@bot.callback_query_handler(func=lambda call: True)
def callback_message(callback):
    markup1 = types.InlineKeyboardMarkup()
    markup2 = types.InlineKeyboardMarkup()
    markup3 = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete")
    btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="delete")
    btn3 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –º—É–∑—ã–∫—É", callback_data="delete")
    markup1.row(btn1)
    markup2.row(btn2)
    markup3.row(btn3)
    photo = open("./kapibara.jpg", "rb")
    url = "https://www.youtube.com/watch?v=7elzoLVEs_w&t=1s"
    if callback.data == 'stih':
        bot.send_message(callback.message.chat.id, poem, reply_markup=markup2)
    elif callback.data == 'kap':
        bot.send_photo(callback.message.chat.id, photo, reply_markup=markup1)
    elif callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'url':
        bot.send_message(callback.message.chat.id, url, reply_markup=markup3)
    elif callback.data == 'RUB/USD':
        values = callback.data.upper().split("/")
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(callback.message.chat.id, f"üíµ{amount} {values[0]} = <b>{round(res, 2)}</b> {values[1]}", parse_mode="HTML")
    elif callback.data == 'RUB/EUR':
        values = callback.data.upper().split("/")
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(callback.message.chat.id, f"üíµ{amount} {values[0]} = <b>{round(res, 2)}</b> {values[1]}", parse_mode="HTML")
    elif callback.data == 'other':
        bot.send_message(callback.message.chat.id, "‚ùóÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ '/'. (–ø—Ä–∏–º–µ—Ä: USD/EUR)</b> \n"
                                                   "<b>–í–∞–ª—é—Ç—ã:</b> \n"
                                                   "üá∫üá∏USD - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä \n"
                                                   "üá™üá∫EUR - –ï–≤—Ä–æ \n"
                                                   "üáØüáµJPY - –Ø–ø–æ–Ω—Å–∫–∞—è –ò–µ–Ω–∞\n"
                                                   "üáßüá¨BGN - –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ª–µ–≤\n"
                                                   "üá®üáæCYP - –ö–∏–ø—Ä—Å–∫–∏–π —Ñ—É–Ω—Ç\n"
                                                   "üá®üáøCZK - –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞\n"
                                                   "üá©üá∞DKK - –î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞\n"
                                                   "üá¨üáßGBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤\n"
                                                   "üá®üá¶CAD - –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
                                                   "üá≥üáøNZD - –ù–æ–≤–æ–∑–µ–ª–∞–Ω–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
                                                   "üá®üá≥CNY - –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å\n"
                                                   "üá∑üá∫RUB - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å\n"
                                                   "üáßüá∑BRL - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª \n"
                                                   "üá∞üá∑KRW - –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞ \n"
                                                   "üá∏üá™SEK - –®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞ \n"
                                                   "üáπüá∑TRY - –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", parse_mode="HTML")
        bot.register_next_step_handler(callback.message, my_currency)

def my_currency(message):
    try:
        values = message.text.upper().split("/")
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(message.chat.id, f"üíµ{amount} {values[0]} = <b>{round(res, 2)}</b> {values[1]}", parse_mode="HTML")
    except Exception:
        bot.send_message(message.chat.id, "–£–ø—Åüòë, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–ø–∏—à–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∑–∞–Ω–æ–≤–æ")
        bot.register_next_step_handler(message, my_currency)



@bot.message_handler(commands=["help"])
def main(message):
    bot.send_message(message.chat.id, '<b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –ë–æ—Ç:</b> \n'
                                      '1)üå§–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (/weather) \n'
                                      '2)üîÆ–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤–∞—à –≤–æ—Ä–æ—Å (/prediction) \n'
                                      '3)#Ô∏è‚É£–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ (/id) \n'
                                      '4)üíµ–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (/convertation) \n'
                                      '4)üîú–ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ...', parse_mode='HTML')

@bot.message_handler(commands=["weather"])
def weather(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
    bot.register_next_step_handler(message, get_weather)
def get_weather(message):
    photo = open("./weathergood.png", "rb")
    city = message.text.strip().lower()
    res = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&APPID={API}&units=metric")
    data = json.loads(res.text)
    if data["cod"]=="404":
        bot.send_message(message.chat.id, "‚ùå–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç‚ùå")
    else:
        bot.send_photo(message.chat.id, photo, caption=f"<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:</b> \n"
                                                       f"üå°<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {data["main"]["temp"]} ¬∞C \n"
                                                       f"ü•µ<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {data["main"]["feels_like"]} ¬∞C \n"
                                                       f"üí¶<b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {data["main"]["humidity"]}% \n"
                                                       f"üí®<b>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b> {data['wind']["speed"]} –º/c", parse_mode='HTML')

@bot.message_handler(commands=['convertation'])
def convert(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    bot.register_next_step_handler(message, summa)
def summa(message):
    global amount
    try:
        amount = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        bot.register_next_step_handler(message, summa)
        return

    if amount > 0:
        markup1 = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("RUB/USD", callback_data="RUB/USD")
        btn2 = types.InlineKeyboardButton("RUB/EUR", callback_data="RUB/EUR")
        btn3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="other")
        markup1.row(btn1, btn2)
        markup1.row(btn3)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç", reply_markup=markup1)
    else:
        bot.send_message(message.chat.id, "‚ùå–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –≤–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        bot.register_next_step_handler(message, summa)



@bot.message_handler(commands=['id'])
def ID(message):
    bot.send_message(message.chat.id, f"–í–∞—à id: {message.from_user.id}")


bot.polling(none_stop=True)
